/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Flatfile } from "../../../..";
export declare namespace Agents {
    interface Options {
        environment?: environments.FlatfileEnvironment | string;
        token: core.Supplier<core.BearerToken>;
    }
}
export declare class Agents {
    private readonly options;
    constructor(options: Agents.Options);
    list(request: Flatfile.ListAgentsRequest): Promise<Flatfile.ListAgentsResponse>;
    /**
     * @throws {Flatfile.BadRequestError}
     */
    create(request: Flatfile.CreateAgentsRequest): Promise<Flatfile.AgentResponse>;
    /**
     * @throws {Flatfile.BadRequestError}
     * @throws {Flatfile.NotFoundError}
     */
    get(agentId: Flatfile.AgentId, request: Flatfile.GetAgentRequest): Promise<Flatfile.AgentResponse>;
    /**
     * @throws {Flatfile.BadRequestError}
     * @throws {Flatfile.NotFoundError}
     */
    getAgentLogs(agentId: Flatfile.AgentId, request: Flatfile.GetAgentLogsRequest): Promise<Flatfile.GetAgentLogsResponse>;
    private _getAuthorizationHeader;
}
