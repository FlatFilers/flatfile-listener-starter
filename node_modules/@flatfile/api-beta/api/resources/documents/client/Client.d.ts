/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Flatfile } from "../../../..";
export declare namespace Documents {
    interface Options {
        environment?: environments.FlatfileEnvironment | string;
        token: core.Supplier<core.BearerToken>;
    }
}
export declare class Documents {
    private readonly options;
    constructor(options: Documents.Options);
    /**
     * Returns all documents for a space
     * @throws {Flatfile.BadRequestError}
     * @throws {Flatfile.NotFoundError}
     */
    list(spaceId: Flatfile.SpaceId): Promise<Flatfile.ListDocumentsResponse>;
    /**
     * Add a new document to the space
     * @throws {Flatfile.BadRequestError}
     * @throws {Flatfile.NotFoundError}
     */
    create(spaceId: Flatfile.SpaceId, request: Flatfile.DocumentConfig): Promise<Flatfile.DocumentResponse>;
    /**
     * Returns a single document
     * @throws {Flatfile.BadRequestError}
     * @throws {Flatfile.NotFoundError}
     */
    get(spaceId: Flatfile.SpaceId, documentId: Flatfile.DocumentId): Promise<Flatfile.DocumentResponse>;
    /**
     * updates a single document, for only the body and title
     * @throws {Flatfile.BadRequestError}
     * @throws {Flatfile.NotFoundError}
     */
    update(spaceId: Flatfile.SpaceId, documentId: Flatfile.DocumentId, request: Flatfile.DocumentConfig): Promise<Flatfile.DocumentResponse>;
    private _getAuthorizationHeader;
}
