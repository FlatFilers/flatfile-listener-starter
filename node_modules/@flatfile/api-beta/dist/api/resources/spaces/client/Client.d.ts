/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Flatfile } from "../../../..";
import { Config } from "../resources/config/client/Client";
export declare namespace Spaces {
    interface Options {
        environment?: environments.FlatfileEnvironment | string;
        token: core.Supplier<core.BearerToken>;
    }
}
export declare class Spaces {
    private readonly options;
    constructor(options: Spaces.Options);
    /**
     * Returns all spaces for an account or environment
     * @throws {Flatfile.BadRequestError}
     */
    list(request?: Flatfile.spaces.ListSpacesRequest): Promise<Flatfile.spaces.ListSpacesResponse>;
    /**
     * Creates a new space based on an existing Space Config
     */
    create(request: Flatfile.spaces.SpaceConfig): Promise<Flatfile.spaces.SpaceResponse>;
    /**
     * Returns a single space
     */
    get(spaceId: Flatfile.SpaceId): Promise<Flatfile.spaces.SpaceResponse>;
    /**
     * Delete a space
     */
    delete(spaceId: Flatfile.SpaceId): Promise<Flatfile.Success>;
    /**
     * Update a space, to change the name for example
     */
    update(spaceId: Flatfile.SpaceId, request: Flatfile.spaces.SpaceConfig): Promise<Flatfile.spaces.SpaceResponse>;
    /**
     * Get a token which can be used to subscribe to events for this space
     */
    getEventToken(spaceId: Flatfile.SpaceId): Promise<Flatfile.spaces.EventToken>;
    private _config;
    get config(): Config;
    private _getAuthorizationHeader;
}
