"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Records = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const serializers = __importStar(require("../../../../serialization"));
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("../../../../errors"));
class Records {
    options;
    constructor(options) {
        this.options = options;
    }
    /**
     * Returns records from a sheet in a workbook
     */
    async get(sheetId, request = {}) {
        const { versionId, sinceVersionId, sortField, sortDirection, filter, filterField, searchValue, searchField, pageSize, pageNumber, includeCounts, includeLinks, includeLMessages, ids, } = request;
        const _queryParams = new URLSearchParams();
        if (versionId != null) {
            _queryParams.append("versionId", versionId);
        }
        if (sinceVersionId != null) {
            _queryParams.append("sinceVersionId", sinceVersionId);
        }
        if (sortField != null) {
            _queryParams.append("sortField", sortField);
        }
        if (sortDirection != null) {
            _queryParams.append("sortDirection", sortDirection);
        }
        if (filter != null) {
            _queryParams.append("filter", filter);
        }
        if (filterField != null) {
            _queryParams.append("filterField", filterField);
        }
        if (searchValue != null) {
            _queryParams.append("searchValue", searchValue);
        }
        if (searchField != null) {
            _queryParams.append("searchField", searchField);
        }
        if (pageSize != null) {
            _queryParams.append("pageSize", pageSize.toString());
        }
        if (pageNumber != null) {
            _queryParams.append("pageNumber", pageNumber.toString());
        }
        if (includeCounts != null) {
            _queryParams.append("includeCounts", includeCounts.toString());
        }
        if (includeLinks != null) {
            _queryParams.append("includeLinks", includeLinks.toString());
        }
        if (includeLMessages != null) {
            _queryParams.append("includeLMessages", includeLMessages.toString());
        }
        if (ids != null) {
            if (Array.isArray(ids)) {
                for (const _item of ids) {
                    _queryParams.append("ids", _item);
                }
            }
            else {
                _queryParams.append("ids", ids);
            }
        }
        const _response = await core.fetcher({
            url: (0, url_join_1.default)(this.options.environment ?? environments.FlatfileEnvironment.Production, `/sheets/${await serializers.SheetId.jsonOrThrow(sheetId)}/records`),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.RecordsResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }
        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError();
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Updates existing records in a workbook sheet
     */
    async update(sheetId, request) {
        const _response = await core.fetcher({
            url: (0, url_join_1.default)(this.options.environment ?? environments.FlatfileEnvironment.Production, `/sheets/${await serializers.SheetId.jsonOrThrow(sheetId)}/records`),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            body: await serializers.UpdateRecordsRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.VersionResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }
        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError();
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Adds records to a workbook sheet
     */
    async insert(sheetId, request) {
        const _response = await core.fetcher({
            url: (0, url_join_1.default)(this.options.environment ?? environments.FlatfileEnvironment.Production, `/sheets/${await serializers.SheetId.jsonOrThrow(sheetId)}/records`),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            body: await serializers.records.insert.Request.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.RecordsResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }
        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError();
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Deletes records from a workbook sheet
     */
    async delete(sheetId, request = {}) {
        const { ids } = request;
        const _queryParams = new URLSearchParams();
        if (ids != null) {
            if (Array.isArray(ids)) {
                for (const _item of ids) {
                    _queryParams.append("ids", _item);
                }
            }
            else {
                _queryParams.append("ids", ids);
            }
        }
        const _response = await core.fetcher({
            url: (0, url_join_1.default)(this.options.environment ?? environments.FlatfileEnvironment.Production, `/sheets/${await serializers.SheetId.jsonOrThrow(sheetId)}/records`),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.Success.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }
        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError();
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Searches for the given value in a field and returns the records that match the search criteria
     */
    async find(sheetId, request) {
        const { fieldKey, searchValue, pageSize, pageNumber } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("fieldKey", fieldKey);
        _queryParams.append("searchValue", searchValue);
        if (pageSize != null) {
            _queryParams.append("pageSize", pageSize.toString());
        }
        if (pageNumber != null) {
            _queryParams.append("pageNumber", pageNumber.toString());
        }
        const _response = await core.fetcher({
            url: (0, url_join_1.default)(this.options.environment ?? environments.FlatfileEnvironment.Production, `/sheets/${await serializers.SheetId.jsonOrThrow(sheetId)}/find`),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.RecordsResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }
        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError();
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Searches for the given searchValue in a field and replaces all instances of that value with replaceValue
     */
    async findAndReplace(sheetId, request) {
        const { fieldKey, searchValue, pageSize, pageNumber, ..._body } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("fieldKey", fieldKey);
        _queryParams.append("searchValue", searchValue);
        if (pageSize != null) {
            _queryParams.append("pageSize", pageSize.toString());
        }
        if (pageNumber != null) {
            _queryParams.append("pageNumber", pageNumber.toString());
        }
        const _response = await core.fetcher({
            url: (0, url_join_1.default)(this.options.environment ?? environments.FlatfileEnvironment.Production, `/sheets/${await serializers.SheetId.jsonOrThrow(sheetId)}/replace`),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            body: await serializers.FindAndReplaceRecordRequest.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.RecordsResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }
        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError();
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                });
        }
    }
    async _getAuthorizationHeader() {
        const bearer = await core.Supplier.get(this.options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }
        return undefined;
    }
}
exports.Records = Records;
