/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Flatfile } from "../../../..";
export declare namespace Records {
    interface Options {
        environment?: environments.FlatfileEnvironment | string;
        token: core.Supplier<core.BearerToken>;
    }
}
export declare class Records {
    private readonly options;
    constructor(options: Records.Options);
    /**
     * Returns records from a sheet in a workbook
     */
    get(sheetId: Flatfile.SheetId, request?: Flatfile.GetRecordsRequest): Promise<Flatfile.RecordsResponse>;
    /**
     * Updates existing records in a workbook sheet
     */
    update(sheetId: Flatfile.SheetId, request: Flatfile.UpdateRecordsRequest): Promise<Flatfile.RecordsResponse>;
    /**
     * Adds records to a workbook sheet
     */
    insert(sheetId: Flatfile.SheetId, request: Flatfile.RecordData[]): Promise<Flatfile.RecordsResponse>;
    /**
     * Deletes records from a workbook sheet
     */
    delete(sheetId: Flatfile.SheetId, request?: Flatfile.DeleteRecordsRequest): Promise<Flatfile.Success>;
    /**
     * Searches for the given value in a field and returns the records that match the search criteria
     */
    find(sheetId: Flatfile.SheetId, request: Flatfile.FindRecordsRequest): Promise<Flatfile.RecordsResponse>;
    /**
     * Searches for the given searchValue in a field and replaces all instances of that value with replaceValue
     */
    findAndReplace(sheetId: Flatfile.SheetId, request: Flatfile.FindAndReplaceRecordRequest): Promise<Flatfile.RecordsResponse>;
    private _getAuthorizationHeader;
}
