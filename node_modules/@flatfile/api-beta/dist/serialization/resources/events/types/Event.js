"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Event = void 0;
const core = __importStar(require("../../../../core"));
exports.Event = core.serialization
    .union("type", {
    "space:added": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).SpaceAddedEvent),
    "space:removed": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).SpaceRemovedEvent),
    "workbook:added": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).WorkbookAddedEvent),
    "workbook:removed": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).WorkbookRemovedEvent),
    "user:added": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).UserAddedEvent),
    "user:removed": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).UserRemovedEvent),
    "user:online": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).UserOnlineEvent),
    "user:offline": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).UserOfflineEvent),
    "upload:started": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).UploadStartedEvent),
    "upload:failed": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).UploadFailedEvent),
    "upload:completed": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).UploadCompletedEvent),
    "job:started": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).JobStartedEvent),
    "job:waiting": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).JobWaitingEvent),
    "job:updated": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).JobUpdatedEvent),
    "job:failed": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).JobFailedEvent),
    job_completed: core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).JobCompletedEvent),
    "job:deleted": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).JobDeletedEvent),
    "records:created": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).RecordsCreatedEvent),
    "records:updated": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).RecordsUpdatedEvent),
    "records:deleted": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).RecordsDeletedEvent),
    "sheet:validated": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).SheetValidatedEvent),
    "action:triggered": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).ActionTriggeredEvent),
    "file:deleted": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).FileDeletedEvent),
    "client:init": core.serialization.lazyObject(async () => (await Promise.resolve().then(() => __importStar(require("../../..")))).ClientInitializedEvent),
})
    .transform({
    transform: (value) => value,
    untransform: (value) => value,
});
