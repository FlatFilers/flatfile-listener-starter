import * as XLSX from 'xlsx';
import { DefaultApi, Job, Workbook, RecordData, WorkbookConfig, SheetConfig } from '@flatfile/api';
import { FlatfileEvent } from '@flatfile/configure';

/**
 * This is a universal helper for writing custom file extractors within Flatfile
 */
declare class AbstractExtractor {
    event: FlatfileEvent;
    /**
     * ID of File being extracted
     */
    fileId: string;
    /**
     * Convenience reference for API client
     */
    api: DefaultApi;
    constructor(event: FlatfileEvent);
    /**
     * Download file data from Flatfile
     */
    getFileBufferFromApi(): Promise<Buffer>;
    /**
     * Start a job on the API referencing the extraction. This will all reporting completion
     * to the user when the extraction is completed.
     */
    startJob(): Promise<Job>;
    /**
     * Complete a previously started extraction job. This will notify the UI that the extraction
     * is ready.
     *
     * @param job
     */
    completeJob(job: Job): Promise<Job | undefined>;
    /**
     * Create workbook on server mactching schema structure and attach to the file
     *
     * @param file
     * @param workbookCapture
     */
    createWorkbook(file: any, workbookCapture: WorkbookCapture): Promise<Workbook>;
    /**
     * Convert the data from each sheet into created records
     *
     * @todo some verification that rows can't contain non-header data
     * @param sheet
     * @private
     */
    protected makeAPIRecords(sheet: SheetCapture): RecordData[];
    /**
     * Get a workbook configuration to post to the API
     *
     * @param name
     * @param spaceId
     * @param environmentId
     * @param workbookCapture
     * @private
     */
    protected getWorkbookConfig(name: string, spaceId: string, environmentId: string, workbookCapture: WorkbookCapture): WorkbookConfig;
    /**
     * Construct a sheet configuration for the extracted sheet
     *
     * @param name
     * @param headers
     * @param required
     * @param descriptions
     * @private
     */
    protected getSheetConfig(name: string, { headers, required, descriptions }: SheetCapture): SheetConfig;
}
/**
 * Generic structure for capturing a workbook
 */
type WorkbookCapture = Record<string, SheetCapture>;
/**
 * Generic structure for capturing a sheet
 */
type SheetCapture = {
    headers: string[];
    required?: Record<string, boolean>;
    descriptions?: Record<string, null | string> | null;
    data: Record<string, any>;
};

declare class ExcelExtractor extends AbstractExtractor {
    event: FlatfileEvent;
    options?: {
        rawNumbers?: boolean | undefined;
    } | undefined;
    private readonly _options;
    constructor(event: FlatfileEvent, options?: {
        rawNumbers?: boolean | undefined;
    } | undefined);
    /**
     * Parse a file buffer into a captured sheet
     *
     * @param buffer
     */
    parseBuffer(buffer: Buffer): Record<string, SheetCapture>;
    /**
     * Convert a template sheet using a special template format
     *
     * @param sheet
     */
    convertSheet(sheet: XLSX.WorkSheet): SheetCapture;
    /**
     * Extract the data from an uploaded XLSX file
     */
    runExtraction(): Promise<boolean>;
    /**
     * This needs to be improved but right now it looks for a pattern unlikely
     * to be in a header.
     *
     * Yes header | foo | bar | baz |
     * No header  | 99  | asd | 0   |
     *
     * @param header
     */
    isHeaderCandidate(header: Record<string, string | number>): boolean;
}

export { ExcelExtractor };
